{"version":3,"file":"chakra-lib.cjs.production.min.js","sources":["../src/FormLabel/FormLabel.tsx","../src/Select/Select.tsx"],"sourcesContent":["import React from 'react';\nimport { FormLabel as FormLabelChakra } from '@chakra-ui/react';\n\nexport const FormLabel = ({ children, name, ...props }: any) => {\n  return (\n    <FormLabelChakra\n      htmlFor={name}\n      fontSize=\"0.84rem\"\n      width=\"100%\"\n      mb=\"6px\"\n      {...props}\n    >\n      {children}\n    </FormLabelChakra>\n  );\n};\n","import React from 'react';\nimport ReactSelect from 'react-select';\nimport {Flex, FormControl, Icon, Spinner, useColorModeValue,} from '@chakra-ui/react';\n\nimport {ChevronDownIcon, SmallCloseIcon} from '@chakra-ui/icons';\nimport {FormLabel} from '../FormLabel';\n\ninterface SelectProps {\n    name?: string;\n    value?: string;\n    options?: any[];\n    isMulti?: boolean;\n    isInvalid?: boolean;\n    leftAddon?: React.ReactNode\n    label?: string\n}\n\nexport const Select = React.forwardRef<any, SelectProps>((\n    {\n        name,\n        value,\n        options = [],\n        isMulti = false,\n        isInvalid = false,\n        leftAddon = undefined,\n        label = '',\n        ...props\n    }, ref) => {\n\n    const themeBgControl = useColorModeValue('#ffffff', 'inherit');\n    const themeColorSingleValue = useColorModeValue('#000000', '#ffffff');\n    const themeControlBorderColor = useColorModeValue('#E2E8F0', 'rgba(255, 255, 255, 0.16)');\n    const themeControlBorderColorFocused = useColorModeValue('#3182ce', '#63b3ed');\n    const themeControlBoxShadowFocused = useColorModeValue('0 0 0 1px #3182ce', '0 0 0 1px #63b3ed');\n    const themeControlBorderColorHoverFocused = useColorModeValue('#3182ce', '#63b3ed');\n    const themeControlBorderColorHover = useColorModeValue('#CBD5E0', 'rgba(255, 255, 255, 0.24)');\n    const themeBgMenuList = useColorModeValue('#ffffff', '#2D3748');\n    const themeBgOptionSelected = useColorModeValue('#3182ce', '#90cdf4');\n    const themeBgOptionHoverSelected = useColorModeValue('#3182ce', '#90cdf4');\n    const themeBgOptionHover = useColorModeValue('#EDF2F6', 'rgba(255, 255, 255, 0.06)');\n    const themeColorOptionActiveSelected = useColorModeValue('#000000', '#000000');\n    const themeColorOptionActive = useColorModeValue('#3182ce', 'rgba(255, 255, 255, 0.80)');\n    const themeColorOption = useColorModeValue('#ffffff', '#000000');\n    const themeColorOptionSelected = useColorModeValue('#000000', '#ffffff');\n    const themePlaceholderColor = useColorModeValue('#A0AEC0', 'rgba(255, 255, 255, 0.24)');\n    const themeColorNoOptionsMessage = useColorModeValue('#A0AEC0', 'rgba(255, 255, 255, 0.24)');\n    const themeBgMultiValue = useColorModeValue('#EDF2F7', '#2D3748');\n    const themeColorMultiValueLabel = useColorModeValue('#000000', '#fffff');\n    const themeColorInput = useColorModeValue('#000000', '#ffffff');\n    const themeColorInvalid = useColorModeValue('#e53e3e', '#FC8181');\n    const themeShadowInvalid = useColorModeValue('0 0 0 1px #e53e3e', '0 0 0 1px #FC8181');\n\n    const indicatorSeparatorStyle = {\n        alignSelf: 'stretch',\n        backgroundColor: '#fff',\n        marginBottom: 8,\n        marginTop: 8,\n        width: 0\n    };\n\n    const IndicatorSeparator = ({innerProps}: any) => {\n        return (\n            <span style={indicatorSeparatorStyle} {...innerProps} />\n        );\n    };\n\n    const LoadingIndicator = () => {\n        return (\n            <Spinner color=\"blue.500\" size=\"xs\"/>\n        );\n    };\n\n    const DropdownIndicator = ({innerProps}: any) => {\n        return (\n            <Flex alignItems=\"center\" alignContent=\"center\" {...innerProps}>\n                <Icon as={ChevronDownIcon} fontSize=\"1.5rem\"/>\n            </Flex>\n        );\n    };\n\n    const ClearIndicator = ({innerProps}: any) => {\n        return (\n            <Flex alignItems=\"center\" alignContent=\"center\" width=\"20px\" {...innerProps}>\n                <Icon as={SmallCloseIcon} fontSize=\"1.1rem\"/>\n            </Flex>\n        );\n    };\n\n    const LoadingMessage = (config: any) => (\n        <div {...config.innerProps} style={config.getStyles('loadingMessage', config)}>\n            Загрузка...\n        </div>\n    );\n\n    const customStyles = {\n        control: (provided: any, state: any) => {\n            const {isFocused} = state;\n            const {isSearchable} = state.selectProps;\n            return (\n                {\n                    ...provided,\n                    borderColor: isInvalid ? themeColorInvalid : isFocused ? themeControlBorderColorFocused : themeControlBorderColor,\n                    boxShadow: isInvalid ? themeShadowInvalid : isFocused && themeControlBoxShadowFocused,\n                    padding: isSearchable ? '0.063rem 0.5rem 0.063rem 0.34rem' : '0.313rem 0.5rem 0.313rem 0.3rem',\n                    backgroundColor: themeBgControl,\n                    transition: '0.3s',\n                    borderRadius: '0.375rem',\n                    '&:hover': {\n                        borderColor: isInvalid ? themeColorInvalid : (isFocused ? themeControlBorderColorHoverFocused : themeControlBorderColorHover),\n                        boxShadow: isInvalid && '0 0 0 1px #fffff'\n                    }\n                }\n            )\n        },\n        menu: (provided: any) => ({\n            ...provided,\n            backgroundColor: 'inherit',\n            zIndex: 999,\n            borderWidth: '1px',\n            //borderColor: '#E2E8F0',\n            borderRadius: '0.375rem',\n            boxShadow: '0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px 0 rgba(0,0,0,0.06)'\n        }),\n        menuList: (provided: any) => ({\n            ...provided,\n            backgroundColor: themeBgMenuList,\n            transition: 'background-color 220ms,color 220ms',\n            borderRadius: '0.25rem'\n        }),\n        option: (provided: any, state: any) => {\n            const {isSelected} = state;\n            return (\n                {\n                    ...provided,\n                    backgroundColor: isSelected && themeBgOptionSelected,\n                    color: isSelected ? themeColorOption : themeColorOptionSelected,\n                    ':active': {\n                        color: isSelected ? themeColorOptionActiveSelected : themeColorOptionActive\n                    },\n                    ':hover': {\n                        ...provided[':hover'],\n                        backgroundColor: isSelected ? themeBgOptionHoverSelected : themeBgOptionHover\n                    }\n                }\n            )\n        },\n        multiValue: (provided: any) => ({\n            ...provided,\n            backgroundColor: themeBgMultiValue\n        }),\n        multiValueLabel: (base: any) => ({\n            ...base,\n            color: themeColorMultiValueLabel\n        }),\n        dropdownIndicator: (provided: any) => ({\n            ...provided,\n            color: '#1A202C',\n            ':hover': '#1A202C'\n        }),\n        clearIndicator: (provided: any) => ({\n            ...provided,\n            color: '#1A202C',\n            ':hover': '#1A202C'\n        }),\n        singleValue: (provided: any, state: any) => {\n            const opacity = state.isDisabled ? 0.5 : 1;\n            const transition = 'opacity 300ms';\n\n            return {...provided, opacity, transition, color: themeColorSingleValue};\n        },\n        placeholder: (base: any) => ({\n            ...base,\n            fontSize: '1em',\n            color: themePlaceholderColor\n        }),\n        noOptionsMessage: (base: any) => {\n            return {\n                ...base,\n                color: themeColorNoOptionsMessage\n            }\n        },\n        input: (base: any) => ({\n            ...base,\n            fontSize: '1em',\n            color: themeColorInput\n        }),\n    }\n    const customTheme = (theme: any) => ({\n        ...theme,\n        borderRadius: 4\n    });\n\n    const getValue = () => {\n        if (!isMulti) {\n            return options.find((item: any) => item.value === value)\n        } else {\n            return value\n        }\n    }\n\n    return (\n        <FormControl isInvalid={isInvalid}>\n            {label && (\n                <FormLabel>\n                    {label}\n                </FormLabel>\n            )}\n            <ReactSelect\n                ref={ref}\n                options={options}\n                name={name}\n                isMulti={isMulti}\n                styles={customStyles}\n                components={{IndicatorSeparator, LoadingIndicator, LoadingMessage, DropdownIndicator, ClearIndicator}}\n                noOptionsMessage={() => 'Нет опций'}\n                theme={customTheme}\n                value={getValue()}\n                {...props}\n            />\n        </FormControl>\n    );\n});\n"],"names":["FormLabel","children","name","props","React","FormLabelChakra","htmlFor","fontSize","width","mb","forwardRef","ref","value","options","isMulti","isInvalid","label","themeBgControl","useColorModeValue","themeColorSingleValue","themeControlBorderColor","themeControlBorderColorFocused","themeControlBoxShadowFocused","themeControlBorderColorHoverFocused","themeControlBorderColorHover","themeBgMenuList","themeBgOptionSelected","themeBgOptionHoverSelected","themeBgOptionHover","themeColorOptionActiveSelected","themeColorOptionActive","themeColorOption","themeColorOptionSelected","themePlaceholderColor","themeColorNoOptionsMessage","themeBgMultiValue","themeColorMultiValueLabel","themeColorInput","themeColorInvalid","themeShadowInvalid","indicatorSeparatorStyle","alignSelf","backgroundColor","marginBottom","marginTop","customStyles","control","provided","state","isFocused","borderColor","boxShadow","padding","selectProps","isSearchable","transition","borderRadius","menu","zIndex","borderWidth","menuList","option","isSelected","color","multiValue","multiValueLabel","base","dropdownIndicator","clearIndicator","singleValue","opacity","isDisabled","placeholder","noOptionsMessage","input","FormControl","ReactSelect","styles","components","IndicatorSeparator","style","innerProps","LoadingIndicator","Spinner","size","LoadingMessage","config","getStyles","DropdownIndicator","Flex","alignItems","alignContent","Icon","as","ChevronDownIcon","ClearIndicator","SmallCloseIcon","theme","find","item"],"mappings":"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"}